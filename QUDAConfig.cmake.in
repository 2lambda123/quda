@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

set(QUDA_QMP @QUDA_QMP@)
set(QUDA_MPI @QUDA_MPI@)
set(QUDA_QIO @QUDA_QIO@)
set(QUDA_OPENMP @QUDA_OPENMP@)
set(QUDA_QDPJIT @QUDA_QDPJIT@)

set(QUDA_TARGET_CUDA @QUDA_TARGET_CUDA@)
set(QUDA_TARGET_HIP  @QUDA_TARGET_HIP@)

set(QUDA_NVSHMEM  @QUDA_NVSHMEM@)
if( QUDA_NVSHMEM )
  set(NVSHMEM_LIBS @NVSHMEM_LIBS@)
  set(NVSHMEM_INCLUDE @NVSHMEM_INCLUDE@)
  add_library(nvshmem_lib STATIC IMPORTED)
  set_target_properties(nvshmem_lib PROPERTIES IMPORTED_LOCATION ${NVSHMEM_LIBS})
  set_target_properties(nvshmem_lib PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
  set_target_properties(nvshmem_lib PROPERTIES CUDA_RESOLVE_DEVICE_SYMBOLS OFF)
  set_target_properties(nvshmem_lib PROPERTIES IMPORTED_LINK_INTERFACE_LANGUAGES CUDA)
endif()

if( QUDA_QMP AND QUDA_MPI )
  message(FATAL_ERROR "Cannot have both QMP and MPI configured")  
endif()

# Everyone needs this
find_dependency(Threads REQUIRED)

if( QUDA_QMP )
  find_dependency(QMP REQUIRED)
endif()

if( QUDA_MPI )
  find_dependency(MPI REQUIRED)
endif()

if( QUDA_QIO )
	find_dependency(QIO REQUIRED)
endif()

if( QUDA_OPENMP )
  find_dependency(OpenMP REQUIRED)
endif()


if( QUDA_TARGET_CUDA )
enable_language(CUDA)
find_package(CUDAToolkit REQUIRED)
elseif(QUDA_TARGET_HIP )
  # HIP Speific CMake
  if (NOT DEFINED ROCM_PATH )
    if (NOT DEFINED ENV{ROCM_PATH} )
            set(ROCM_PATH "/opt/rocm" CACHE PATH "ROCm path")
    else()
            set(ROCM_PATH $ENV{ROCM_PATH} CACHE PATH "ROCm path")
    endif()
  endif()
  set(CMAKE_MODULE_PATH "${ROCM_PATH}/lib/cmake" ${CMAKE_MODULE_PATH})
  find_dependency(HIP REQUIRED)
  find_dependency(hipfft REQUIRED)
  find_dependency(hiprand REQUIRED)
  find_dependency(rocrand REQUIRED)
  find_dependency(hipblas REQUIRED)
  find_dependency(rocblas REQUIRED)
  find_dependency(hipcub REQUIRED)
  find_dependency(rocprim REQUIRED)
endif()

if( QUDA_QDPJIT )
  find_dependency( QDPXX REQUIRED )
endif()

include(${CMAKE_CURRENT_LIST_DIR}/QUDATargets.cmake)



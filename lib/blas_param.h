/*
     Auto-tuned blas CUDA parameters, generated by blas_test
*/
// Kernel: copyCuda                           
blas_threads[0][0] = 64;
blas_blocks[0][0] = 256;

// Kernel: axpbyCuda                          
blas_threads[0][1] = 64;
blas_blocks[0][1] = 1024;

// Kernel: xpyCuda                            
blas_threads[0][2] = 64;
blas_blocks[0][2] = 1024;

// Kernel: axpyCuda                           
blas_threads[0][3] = 64;
blas_blocks[0][3] = 1024;

// Kernel: xpayCuda                           
blas_threads[0][4] = 64;
blas_blocks[0][4] = 1024;

// Kernel: mxpyCuda                           
blas_threads[0][5] = 64;
blas_blocks[0][5] = 1024;

// Kernel: axCuda                             
blas_threads[0][6] = 64;
blas_blocks[0][6] = 1024;

// Kernel: caxpyCuda                          
blas_threads[0][7] = 64;
blas_blocks[0][7] = 1024;

// Kernel: caxpbyCuda                         
blas_threads[0][8] = 64;
blas_blocks[0][8] = 1024;

// Kernel: cxpaypbzCuda                       
blas_threads[0][9] = 64;
blas_blocks[0][9] = 1024;

// Kernel: axpyZpbxCuda                       
blas_threads[0][10] = 64;
blas_blocks[0][10] = 512;

// Kernel: caxpbypzYmbwCuda                   
blas_threads[0][11] = 64;
blas_blocks[0][11] = 1024;

// Kernel: sumCuda                            
blas_threads[0][12] = 64;
blas_blocks[0][12] = 128;

// Kernel: normCuda                           
blas_threads[0][13] = 64;
blas_blocks[0][13] = 128;

// Kernel: reDotProductCuda                   
blas_threads[0][14] = 64;
blas_blocks[0][14] = 64;

// Kernel: axpyNormCuda                       
blas_threads[0][15] = 64;
blas_blocks[0][15] = 256;

// Kernel: xmyNormCuda                        
blas_threads[0][16] = 64;
blas_blocks[0][16] = 512;

// Kernel: cDotProductCuda                    
blas_threads[0][17] = 64;
blas_blocks[0][17] = 64;

// Kernel: xpaycDotzyCuda                     
blas_threads[0][18] = 64;
blas_blocks[0][18] = 256;

// Kernel: cDotProductNormACuda               
blas_threads[0][19] = 64;
blas_blocks[0][19] = 64;

// Kernel: cDotProductNormBCuda               
blas_threads[0][20] = 64;
blas_blocks[0][20] = 64;

// Kernel: caxpbypzYmbwcDotProductWYNormYQuda 
blas_threads[0][21] = 64;
blas_blocks[0][21] = 512;

// Kernel: copyCuda                           
blas_threads[1][0] = 64;
blas_blocks[1][0] = 1024;

// Kernel: axpbyCuda                          
blas_threads[1][1] = 128;
blas_blocks[1][1] = 128;

// Kernel: xpyCuda                            
blas_threads[1][2] = 128;
blas_blocks[1][2] = 128;

// Kernel: axpyCuda                           
blas_threads[1][3] = 128;
blas_blocks[1][3] = 128;

// Kernel: xpayCuda                           
blas_threads[1][4] = 128;
blas_blocks[1][4] = 128;

// Kernel: mxpyCuda                           
blas_threads[1][5] = 128;
blas_blocks[1][5] = 128;

// Kernel: axCuda                             
blas_threads[1][6] = 64;
blas_blocks[1][6] = 128;

// Kernel: caxpyCuda                          
blas_threads[1][7] = 64;
blas_blocks[1][7] = 128;

// Kernel: caxpbyCuda                         
blas_threads[1][8] = 64;
blas_blocks[1][8] = 128;

// Kernel: cxpaypbzCuda                       
blas_threads[1][9] = 64;
blas_blocks[1][9] = 128;

// Kernel: axpyZpbxCuda                       
blas_threads[1][10] = 128;
blas_blocks[1][10] = 128;

// Kernel: caxpbypzYmbwCuda                   
blas_threads[1][11] = 64;
blas_blocks[1][11] = 128;

// Kernel: sumCuda                            
blas_threads[1][12] = 128;
blas_blocks[1][12] = 1024;

// Kernel: normCuda                           
blas_threads[1][13] = 128;
blas_blocks[1][13] = 1024;

// Kernel: reDotProductCuda                   
blas_threads[1][14] = 128;
blas_blocks[1][14] = 1024;

// Kernel: axpyNormCuda                       
blas_threads[1][15] = 128;
blas_blocks[1][15] = 1024;

// Kernel: xmyNormCuda                        
blas_threads[1][16] = 128;
blas_blocks[1][16] = 1024;

// Kernel: cDotProductCuda                    
blas_threads[1][17] = 128;
blas_blocks[1][17] = 512;

// Kernel: xpaycDotzyCuda                     
blas_threads[1][18] = 64;
blas_blocks[1][18] = 128;

// Kernel: cDotProductNormACuda               
blas_threads[1][19] = 64;
blas_blocks[1][19] = 1024;

// Kernel: cDotProductNormBCuda               
blas_threads[1][20] = 64;
blas_blocks[1][20] = 1024;

// Kernel: caxpbypzYmbwcDotProductWYNormYQuda 
blas_threads[1][21] = 64;
blas_blocks[1][21] = 128;

// Kernel: copyCuda                           
blas_threads[2][0] = 64;
blas_blocks[2][0] = 128;

// Kernel: axpbyCuda                          
blas_threads[2][1] = 64;
blas_blocks[2][1] = 128;

// Kernel: xpyCuda                            
blas_threads[2][2] = 64;
blas_blocks[2][2] = 128;

// Kernel: axpyCuda                           
blas_threads[2][3] = 64;
blas_blocks[2][3] = 128;

// Kernel: xpayCuda                           
blas_threads[2][4] = 64;
blas_blocks[2][4] = 128;

// Kernel: mxpyCuda                           
blas_threads[2][5] = 64;
blas_blocks[2][5] = 128;

// Kernel: axCuda                             
blas_threads[2][6] = 64;
blas_blocks[2][6] = 1024;

// Kernel: caxpyCuda                          
blas_threads[2][7] = 64;
blas_blocks[2][7] = 128;

// Kernel: caxpbyCuda                         
blas_threads[2][8] = 64;
blas_blocks[2][8] = 128;

// Kernel: cxpaypbzCuda                       
blas_threads[2][9] = 64;
blas_blocks[2][9] = 1024;

// Kernel: axpyZpbxCuda                       
blas_threads[2][10] = 64;
blas_blocks[2][10] = 128;

// Kernel: caxpbypzYmbwCuda                   
blas_threads[2][11] = 64;
blas_blocks[2][11] = 128;

// Kernel: sumCuda                            
blas_threads[2][12] = 128;
blas_blocks[2][12] = 128;

// Kernel: normCuda                           
blas_threads[2][13] = 128;
blas_blocks[2][13] = 128;

// Kernel: reDotProductCuda                   
blas_threads[2][14] = 128;
blas_blocks[2][14] = 128;

// Kernel: axpyNormCuda                       
blas_threads[2][15] = 64;
blas_blocks[2][15] = 128;

// Kernel: xmyNormCuda                        
blas_threads[2][16] = 64;
blas_blocks[2][16] = 128;

// Kernel: cDotProductCuda                    
blas_threads[2][17] = 64;
blas_blocks[2][17] = 128;

// Kernel: xpaycDotzyCuda                     
blas_threads[2][18] = 64;
blas_blocks[2][18] = 128;

// Kernel: cDotProductNormACuda               
blas_threads[2][19] = 64;
blas_blocks[2][19] = 128;

// Kernel: cDotProductNormBCuda               
blas_threads[2][20] = 64;
blas_blocks[2][20] = 128;

// Kernel: caxpbypzYmbwcDotProductWYNormYQuda 
blas_threads[2][21] = 64;
blas_blocks[2][21] = 256;


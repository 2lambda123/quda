###### Local configuration:

CUDA_INSTALL_PATH = /usr/local/cuda

CPU_ARCH = x86_64   # x86 or x86_64
GPU_ARCH = sm_13    # sm_10, sm_11, sm_12, sm_13, or sm_20
GPU_EMU  = false    # set to 'true' for device emulation

GPU_FATLINK = no    # compile quda code for fatlink computation
GPU_GAUGE_FORCE   = no  # compile quda code for gauge force computation
GPU_FERMION_FORCE = no  # compile quda code for fermion force computation

PYTHON = python     # python 2.5 or later required for 'make gen'
DEVICE = 0          # CUDA device to use for 'make tune'

######

INC = -I$(CUDA_INSTALL_PATH)/include

ifeq ($(strip $(CPU_ARCH)), x86_64)
  LIB = -L$(CUDA_INSTALL_PATH)/lib64 -lcudart # for release 2.3 and later
  # LIB = -L$(CUDA_INSTALL_PATH)/lib -lcudart # for release 2.2 and earlier
  COPT =
else
  LIB = -L$(CUDA_INSTALL_PATH)/lib -lcudart
  COPT = -malign-double
endif

COPT += -D__CUDA_ARCH__=$(GPU_ARCH:sm_%=%0)
NVCCOPT += -D__CUDA_ARCH__=$(GPU_ARCH:sm_%=%0)

ifeq ($(strip $(GPU_EMU)), true)
  COPT += -D__DEVICE_EMULATION__
  NVCCOPT = -deviceemu
endif

ifeq ($(strip $(GPU_ARCH)), sm_20)
  NVCCOPT += -ftz=true -prec-div=false -prec-sqrt=false
endif

ifeq ($(strip $(GPU_FATLINK)), yes)
  NVCCOPT += -DGPU_FATLINK
  FATLINK_TEST=llfat_test
endif
ifeq ($(strip $(GPU_FERMION_FORCE)), yes)
  NVCCOPT += -DGPU_FERMION_FORCE
  FERMION_FORCE_TEST=fermion_force_test
endif


CC = gcc
CFLAGS = -g -Wall -O3 -std=c99 $(COPT) $(INC)
CXX = g++
CXXFLAGS = -g -Wall -O3 $(COPT) $(INC)
NVCC = $(CUDA_INSTALL_PATH)/bin/nvcc 
NVCCFLAGS = -O3 $(NVCCOPT) -arch=$(GPU_ARCH) $(INC) --ptxas-options=-v
LDFLAGS = -fPIC $(LIB)
